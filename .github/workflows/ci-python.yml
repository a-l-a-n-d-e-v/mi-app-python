name: CI Básico Python

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: [linux-x64-self-hosted]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Verificar e instalar dependencias del sistema
      run: |
        # Verificar e instalar solo las dependencias faltantes
        DEPS_TO_INSTALL=()
        for pkg in build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
                  libsqlite3-dev wget llvm libncursesw5-dev xz-utils tk-dev \
                  libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev; do
          if ! dpkg -l | grep -q "^ii\s*$pkg\s"; then
            DEPS_TO_INSTALL+=("$pkg")
          fi
        done
        
        if [ ${#DEPS_TO_INSTALL[@]} -ne 0 ]; then
          sudo apt-get update
          sudo apt-get install -y "${DEPS_TO_INSTALL[@]}"
        else
          echo "Todas las dependencias del sistema ya están instaladas"
        fi

    - name: Configurar pyenv y Python 3.11.2
      run: |
        # Verificar si pyenv ya está instalado
        if ! command -v pyenv &> /dev/null; then
          echo "Instalando pyenv..."
          curl https://pyenv.run | bash
          echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
          echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
          echo 'eval "$(pyenv init -)"' >> ~/.bashrc
          echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          eval "$(pyenv virtualenv-init -)"
        fi
        
        # Verificar si Python 3.11.2 está instalado
        if ! pyenv versions | grep -q "3.11.2"; then
          echo "Instalando Python 3.11.2..."
          pyenv install 3.11.2
          pyenv global 3.11.2
        fi
        
        python --version

    - name: Configurar entorno virtual e instalar dependencias
      run: |
        # Usar pyenv para Python 3.11.2
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init --path)"
        
        # Crear entorno virtual solo si no existe
        if [ ! -d "deploy" ]; then
          python -m venv deploy
        fi
        
        # Activar el entorno virtual y actualizar pip
        source deploy/bin/activate
        python -m pip install --upgrade pip
        
        # Instalar dependencias si hay cambios en requirements.txt
        if [ ! -f "deploy/.last_requirements" ] || ! cmp -s requirements.txt deploy/.last_requirements; then
          pip install -r requirements.txt
          cp requirements.txt deploy/.last_requirements
        else
          echo "No hay cambios en requirements.txt, omitiendo la instalación de dependencias"
        fi

    - name: Ejecutar tests
      run: |
        source deploy/bin/activate
        PYTHONPATH=$PYTHONPATH:. pytest tests/ -v

    - name: Ejecutar con cobertura
      run: |
        source deploy/bin/activate
        PYTHONPATH=$PYTHONPATH:. pytest --cov=app --cov-report=term --cov-report=html

    - name: Guardar reporte de cobertura
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
